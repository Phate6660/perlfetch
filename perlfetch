#!/usr/bin/env perl
use warnings;

# Read a file and return a specified line.
sub get_line {
    my $file = $_[0];
    my $line_number = $_[1];
    open my $info, $file or return "N/A (could not open $file)";
    my $line;
    while (my $line_from_file = <$info>) {
        $line = $line_from_file;
        last if $. == $line_number;
    }
    close $info;
    $line =~ s/\n//g;
    return $line;
}

sub get_var {
    my $env_var = $_[0];
    my $na_message = $_[1];
    my $contents;
    if ($ENV{$env_var}) {
        $contents = $ENV{$env_var};
    } else {
        $contents = $na_message;
    }
    return $contents;
}

sub get_cpu {
    my $cpu_line = get_line('/proc/cpuinfo', 5);
    my @cpu_list = split(/:/, $cpu_line);
    my $cpu = $cpu_list[1];
    $cpu =~ s/^.//;
    return $cpu;
}

sub get_distro {
    my $dist_line = get_line('/etc/os-release', 3);
    my @dist_list = split(/=/, $dist_line);
    my $dist = $dist_list[1];
    $dist =~ s/"//g;
    return $dist;
}

sub get_de {
    my $XDG_DESKTOP_SESSION = get_var('XDG_DESKTOP_SESSION', "N/A");
    if ($XDG_DESKTOP_SESSION eq "N/A") {
        my $XDG_CURRENT_DESKTOP = get_var('XDG_CURRENT_DESKTOP', "N/A");
        if ($XDG_CURRENT_DESKTOP eq "N/A") {
            my $DESKTOP_SESSION = get_var('DESKTOP_SESSION', "N/A");
            if ($DESKTOP_SESSION eq "N/A") {
                return "N/A (could not find a desktop environment | TODO: find WM)";
            } else {
                return $DESKTOP_SESSION;
            }
        } else {
            return $XDG_CURRENT_DESKTOP;
        }
    } else {
        return $XDG_DESKTOP_SESSION;
    }
}

sub get_packages {
    my $package_manager = $_[0];
    if ($package_manager eq "portage") {
        open(FH, '/var/lib/portage/world');
        my $explicit_package_count;
        if (<FH>) {
            my $lines = 0;
            while (<FH>) {
                $lines++;
            }
            $explicit_package_count = $lines;
            close(FH);
        } else {
            $explicit_package_count = "N/A (could not read '/var/lib/portage/world')";
        }
        my @package_list = glob('/var/db/pkg/*/*');
        # Package count needs one added.
        my $total_package_count = $#package_list + 1;
        return $explicit_package_count . " (explicit) " . $total_package_count . " (total)";
    }
}

sub get_info {
    my $cpu             = get_cpu;
    my $distro          = get_distro;
    my $editor          = get_var('EDITOR', "N/A (could not read \$EDITOR)");
    my $environment     = get_de;
    my $hostname        = get_line('/etc/hostname', 1);
    my $kernel          = get_line('/proc/sys/kernel/osrelease', 1);
    my $package_manager = $ARGV[0];
    my $packages;
    if (!$package_manager) {
        $packages       = "N/A (no package manager was passed)";
    } elsif ($package_manager ne "portage") {
        $packages       = "N/A (no supported package manager was passed)";
    } else {
        $packages       = get_packages $package_manager;
    }
    my $shell           = get_var('SHELL', "N/A (could not read \$SHELL)");
    my $user            = get_var('USER', "N/A (could not read \$USER)");
    return (
        cpu         => $cpu,
        distro      => $distro,
        editor      => $editor,
        environment => $environment,
        hostname    => $hostname,
        kernel      => $kernel,
        packages    => $packages,
        shell       => $shell,
        user        => $user
        );
}

my %info = get_info;
format OUTPUT =
^*
"CPU         = " . $info{cpu}
^*
"DISTRO      = " . $info{distro}
^*
"EDITOR      = " . $info{editor}
^*
"ENVIRONMENT = " . $info{environment}
^*
"HOSTNAME    = " . $info{hostname}
^*
"KERNEL      = " . $info{kernel}
^*
"PACKAGES    = " . $info{packages}
^*
"SHELL       = " . $info{shell}
^*
"USER        = " . $info{user}
.

select(STDOUT);
$~ = OUTPUT;
write;
