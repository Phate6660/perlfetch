#!/usr/bin/env perl
use warnings;
use strict;

# Read a file and return a specified line.
sub get_line {
    my ($file, $line_number) = @_;
    open my $info, '<', $file or return "N/A (could not open $file)";
    my $line;
    while (my $line_from_file = <$info>) {
        $line = $line_from_file;
        last if $. == $line_number;
    }
    close $info;
    $line =~ s/\n//g;
    return $line;
}

sub get_var {
    my ($env_var, $na_message) = @_;
    my $contents;
    if ($ENV{$env_var}) {
        $contents = $ENV{$env_var};
    } else {
        $contents = $na_message;
    }
    return $contents;
}

sub get_cpu {
    my $cpu_line = get_line('/proc/cpuinfo', 5);
    my @cpu_list = split(/:/, $cpu_line);
    my $cpu      = $cpu_list[1];
    $cpu =~ s/^.//;
    return $cpu;
}

sub get_distro {
    my $dist_line = get_line('/etc/os-release', 3);
    my @dist_list = split(/=/, $dist_line);
    my $dist      = $dist_list[1];
    $dist =~ s/"//g;
    return $dist;
}

sub get_de {
    my $XDG_DESKTOP_SESSION = get_var('XDG_DESKTOP_SESSION', "N/A");
    if ($XDG_DESKTOP_SESSION eq "N/A") {
        my $XDG_CURRENT_DESKTOP = get_var('XDG_CURRENT_DESKTOP', "N/A");
        if ($XDG_CURRENT_DESKTOP eq "N/A") {
            my $DESKTOP_SESSION = get_var('DESKTOP_SESSION', "N/A");
            if ($DESKTOP_SESSION eq "N/A") {
                return "N/A (could not find a desktop environment | TODO: find WM)";
            } else {
                return $DESKTOP_SESSION;
            }
        } else {
            return $XDG_CURRENT_DESKTOP;
        }
    } else {
        return $XDG_DESKTOP_SESSION;
    }
}

sub get_music {
    my ($music_player) = @_;
    if ($music_player eq "spotify" or $music_player eq "rhythmbox") {
        open my $cmd, '-|', 'playerctl metadata -f "{{artist}} - {{title}}"' 
            or return "N/A (could not run playerctl)";
        while (my $output = <$cmd>) {
            $output =~ s/\n//g;
            return $output;
        }
    } elsif ($music_player eq "mpd") {
        open my $cmd, '-|', 'mpc current | head -n1' or return "N/A (could not run mpc)";
        while (my $output = <$cmd>) {
            $output =~ s/\n//g;
            return $output;
        }
    } else {
        return "N/A (did not pass a supported player)";
    }
}

sub get_packages {
    my ($package_manager) = @_;
    if ($package_manager eq "portage") {
        my $explicit_package_count;
        if (open my $FH, '<', '/var/lib/portage/world') {
            () = <$FH>;
            $explicit_package_count = $.;
        } else {
            $explicit_package_count = "N/A (could not read '/var/lib/portage/world')";
        }
        my @package_list        = glob '/var/db/pkg/*/*';
        my $total_package_count = @package_list;
        return $explicit_package_count . " (explicit) " . $total_package_count . " (total)";
    }
}

sub get_uptime {
    my $uptime_pre = get_line('/proc/uptime', 1);
    my $raw_uptime = (split /\./, $uptime_pre)[0];
    my ($days, $hours, $minutes);
    if ($raw_uptime > 86400) {
        my $days_pre = $raw_uptime / 60 / 60 / 24;
        $days_pre = (split /\./, $days_pre)[0] if index($days_pre, '.') != -1;
        $days     = $days_pre . "d";
    } else {
        $days = "";
    }
    if ($raw_uptime > 3600) {
        my $hours_pre = ($raw_uptime / 60 / 60) % 24;
        $hours_pre = (split /\./, $hours_pre)[0] if index($hours_pre, '.') != -1;
        $hours     = $hours_pre . "h";
    } else {
        $hours = "";
    }
    if ($raw_uptime > 60) {
        my $minutes_pre = ($raw_uptime / 60) % 60;
        $minutes     = $minutes_pre . "m";
        $minutes_pre = (split /\./, $minutes_pre)[0] if index($minutes_pre, '.') != -1;
    } else {
        $minutes = "";
    }
    return join ' ', grep length, $days, $hours, $minutes;
}

sub get_info {
    my $cpu             = get_cpu();
    my $distro          = get_distro();
    my $editor          = get_var('EDITOR', "N/A (could not read \$EDITOR)");
    my $environment     = get_de();
    my $hostname        = get_line('/etc/hostname',              1);
    my $kernel          = get_line('/proc/sys/kernel/osrelease', 1);
    my $package_manager = $ARGV[0];
    my $packages;
    if (!$package_manager) {
        $packages = "N/A (no package manager was passed)";
    } elsif ($package_manager ne "portage") {
        $packages = "N/A (no supported package manager was passed)";
    } else {
        $packages = get_packages($package_manager);
    }
    my $music_player = $ARGV[1];
    my $music;
    if (!$music_player) {
        $music = get_music("N/A");
    } else {
        $music = get_music($music_player);
    }
    my $shell  = get_var('SHELL', "N/A (could not read \$SHELL)");
    my $uptime = get_uptime();
    my $user   = get_var('USER', "N/A (could not read \$USER)");
    return 
        cpu         => $cpu,
        distro      => $distro,
        editor      => $editor,
        environment => $environment,
        hostname    => $hostname,
        kernel      => $kernel,
        music       => $music,
        packages    => $packages,
        shell       => $shell,
        uptime      => $uptime,
        user        => $user;
}

my %info = get_info();

print << "EOF"
CPU         = $info{cpu}
DISTRO      = $info{distro}
EDITOR      = $info{editor}
ENVIRONMENT = $info{environment}
HOSTNAME    = $info{hostname}
KERNEL      = $info{kernel}
PACKAGES    = $info{packages}
SHELL       = $info{shell}
UPTIME      = $info{uptime}
USER        = $info{user}
MUSIC       = $info{music}
EOF
